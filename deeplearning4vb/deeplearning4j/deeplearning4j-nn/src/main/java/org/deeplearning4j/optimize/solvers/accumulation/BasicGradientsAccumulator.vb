Imports System
Imports System.Collections.Generic
Imports System.Threading
Imports NonNull = lombok.NonNull
Imports Slf4j = lombok.extern.slf4j.Slf4j
Imports StepFunction = org.deeplearning4j.optimize.api.StepFunction
Imports MemoryWorkspace = org.nd4j.linalg.api.memory.MemoryWorkspace
Imports INDArray = org.nd4j.linalg.api.ndarray.INDArray
Imports Nd4j = org.nd4j.linalg.factory.Nd4j

'
' *  ******************************************************************************
' *  *
' *  *
' *  * This program and the accompanying materials are made available under the
' *  * terms of the Apache License, Version 2.0 which is available at
' *  * https://www.apache.org/licenses/LICENSE-2.0.
' *  *
' *  *  See the NOTICE file distributed with this work for additional
' *  *  information regarding copyright ownership.
' *  * Unless required by applicable law or agreed to in writing, software
' *  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
' *  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
' *  * License for the specific language governing permissions and limitations
' *  * under the License.
' *  *
' *  * SPDX-License-Identifier: Apache-2.0
' *  *****************************************************************************
' 

Namespace org.deeplearning4j.optimize.solvers.accumulation


'JAVA TO VB CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
'ORIGINAL LINE: @Slf4j public class BasicGradientsAccumulator implements GradientsAccumulator
	<Serializable>
	Public Class BasicGradientsAccumulator
		Implements GradientsAccumulator

		Protected Friend handler As MessageHandler

		' here we'll store messages coming from "somewhere else"
		<NonSerialized>
		Protected Friend gradients As IndexedTail

		' this field stores current accumulated
		<NonSerialized>
		Protected Friend storage As INDArray

		' this field stores updates ready-to-apply
		<NonSerialized>
		Protected Friend updates As INDArray

		' this counter tracks number of messages generated by this accumulation
		<NonSerialized>
		Protected Friend ownCounter As New AtomicLong(0)

		' this counter tracks number of messages received from somewhere
		<NonSerialized>
		Protected Friend extCounter As New AtomicLong(0)

		' FIXME: this mechanics should be improved i think.
		Protected Friend shape() As Long
		Protected Friend ordering As Char

		Protected Friend parties As Integer = 0
		Protected Friend barrier As CyclicBarrier
		Protected Friend firstOne As New AtomicLong(-1L)
		Protected Friend candidates As IList(Of INDArray) = New CopyOnWriteArrayList(Of INDArray)()

		Protected Friend updatesLock As New ReentrantReadWriteLock()
		Protected Friend hasSomething As New AtomicBoolean(False)

		''' <summary>
		''' Creates new GradientsAccumulator with starting threshold of 1e-3
		''' </summary>
		Public Sub New(ByVal parties As Integer)
			Me.New(parties, New LocalHandler())
		End Sub

		''' <summary>
		''' Creates new GradientsAccumulator with custom starting threshold
		''' </summary>
		''' <param name="handler"> MessageHandler instance that'll be used for communication purposes </param>
'JAVA TO VB CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
'ORIGINAL LINE: public BasicGradientsAccumulator(int parties, @NonNull MessageHandler handler)
		Public Sub New(ByVal parties As Integer, ByVal handler As MessageHandler)
			Me.gradients = New IndexedTail(parties)
			Me.handler = handler

			Me.handler.initialize(Me)
			Me.parties = parties
			barrier = New CyclicBarrier(parties)
		End Sub

		Public Overridable Property ExternalSource As IndexedTail Implements GradientsAccumulator.getExternalSource
			Get
				Return gradients
			End Get
			Set(ByVal source As IndexedTail)
				gradients = source
			End Set
		End Property

		''' <summary>
		''' This method applies accumulated updates via given StepFunction
		''' </summary>
		''' <param name="function"> </param>
		''' <param name="params"> </param>
		Public Overridable Sub applyUpdate(ByVal [function] As StepFunction, ByVal params As INDArray, ByVal grad As INDArray, ByVal isFinalStep As Boolean) Implements GradientsAccumulator.applyUpdate

			Try
				updatesLock.readLock().lock()

				firstOne.compareAndSet(-1L, Thread.CurrentThread.getId())

				If hasSomething.get() Then
					[function].step(params, updates)
				End If

				barrier.await()
				If firstOne.get() = Thread.CurrentThread.getId() Then
					' one thread just nullifies this array
					updates.assign(0.0)
					hasSomething.set(False)

					firstOne.set(-1L)
				End If

				updatesLock.readLock().unlock()
				barrier.await()
			Catch e As InterruptedException
				Thread.CurrentThread.Interrupt()
				Throw New Exception(e)
			Catch e As BrokenBarrierException
				Throw New Exception(e)
			End Try
		End Sub

		Public Overridable Sub markExternalUpdates(ByVal updatesAvailable As Boolean) Implements GradientsAccumulator.markExternalUpdates
			' no-op
		End Sub

		''' <summary>
		''' This method applies accumulated updates via given StepFunction
		''' </summary>
		''' <param name="function"> </param>
		''' <param name="params"> </param>
		Public Overridable Sub applyUpdate(ByVal [function] As StepFunction, ByVal params As INDArray, ByVal grad As INDArray, ByVal alpha As Double) Implements GradientsAccumulator.applyUpdate

			Try
				updatesLock.readLock().lock()

				firstOne.compareAndSet(-1L, Thread.CurrentThread.getId())

				If hasSomething.get() Then
					[function].step(params, updates, alpha)
				End If

				barrier.await()
				If firstOne.get() = Thread.CurrentThread.getId() Then
					' one thread just nullifies this array
					updates.assign(0.0)
					hasSomething.set(False)

					firstOne.set(-1L)
				End If

				updatesLock.readLock().unlock()
				barrier.await()
			Catch e As InterruptedException
				Thread.CurrentThread.Interrupt()
				Throw New Exception(e)
			Catch e As BrokenBarrierException
				Throw New Exception(e)
			End Try
		End Sub

		''' <summary>
		''' This method accepts updates suitable for StepFunction, and accumulates/propagates it across all workers
		''' </summary>
		''' <param name="array"> </param>
		Public Overridable Sub storeUpdate(ByVal array As INDArray, ByVal iterationNumber As Integer, ByVal epochNumber As Integer) Implements GradientsAccumulator.storeUpdate
	'        
	'            Here we want to do 4 things:
	'            1) update accumulated values
	'            2) invoke extractor, that'll (optionally) pull all updates above threshold
	'            3) ???
	'            4) PROFIT!
	'         

			Try
				' commit should happen in each individual thread
				Nd4j.Executioner.commit()
				firstOne.compareAndSet(-1L, Thread.CurrentThread.getId())

				' TODO: since we know number of elements in advance, we don't really need CopyOnWrite list here.
				candidates.Add(array)
				barrier.await()

				If firstOne.get() = Thread.CurrentThread.getId() Then
					' if accum is null, let's just create it here
					If storage Is Nothing Then
						' we don't want state array to be attached to any workspace
						shape = array.shape()
						ordering = array.ordering()

						Using workspace As org.nd4j.linalg.api.memory.MemoryWorkspace = org.nd4j.linalg.factory.Nd4j.MemoryManager.scopeOutOfWorkspaces()
							' TODO: if p2p isn't supported, this should become HOST-only allocation
							storage = Nd4j.create(shape, ordering)
						End Using
					End If


					' accumulate our values, a
					'storage.addi(array);
					Nd4j.accumulate(storage, candidates)

					' we ensure storage was updated successfully
					Nd4j.Executioner.commit()

					' if there's something to send - send it. Skip otherwise!!!
					If handler.broadcastUpdates(storage, iterationNumber, epochNumber) Then
						ownCounter.getAndIncrement()
					End If

					' reset "first one" :)
					firstOne.set(-1L)
					candidates.Clear()
				End If

				barrier.await()
			Catch e As InterruptedException
				Thread.CurrentThread.Interrupt()
				Throw New Exception(e)
			Catch e As BrokenBarrierException
				Throw New Exception(e)
			End Try
		End Sub


		''' <summary>
		''' This method accepts updates suitable for StepFunction and puts them to the queue, which is used in backpropagation loop
		''' 
		''' PLEASE NOTE: array is expected to be ready for use and match params dimensionality
		''' </summary>
		''' <param name="array"> </param>
		Public Overridable Sub receiveUpdate(ByVal array As INDArray) Implements GradientsAccumulator.receiveUpdate
			extCounter.getAndIncrement()

			updatesLock.writeLock().lock()

			If updates Is Nothing Then
				Using workspace As org.nd4j.linalg.api.memory.MemoryWorkspace = org.nd4j.linalg.factory.Nd4j.MemoryManager.scopeOutOfWorkspaces()
					' TODO: this one has to be HOST-only if P2P is NOT supported
					updates = Nd4j.create(array.shape(), array.ordering())
				End Using
			End If

			hasSomething.compareAndSet(False, True)

			' if P2P is NOT supported - this call should be handled with cpu
			updates.addi(array)

			' we have to ensure, all operations were finished here
			Nd4j.Executioner.commit()

			updatesLock.writeLock().unlock()
		End Sub


		''' <summary>
		''' This method resets all accumulated updates (if any)
		''' </summary>
		Public Overridable Sub reset() Implements GradientsAccumulator.reset
			updatesLock.writeLock().lock()

			If storage IsNot Nothing Then
				storage.assign(0.0f)
			End If

			If updates IsNot Nothing Then
				updates.assign(0.0f)
			End If

			updatesLock.writeLock().unlock()
		End Sub

		''' <summary>
		''' This method does initialization of given worker wrt Thread-Device Affinity
		''' </summary>
		Public Overridable Sub touch() Implements GradientsAccumulator.touch
			' no-op
		End Sub



		Public Overridable Function hasAnything() As Boolean Implements GradientsAccumulator.hasAnything
			Return False
		End Function
	End Class

End Namespace