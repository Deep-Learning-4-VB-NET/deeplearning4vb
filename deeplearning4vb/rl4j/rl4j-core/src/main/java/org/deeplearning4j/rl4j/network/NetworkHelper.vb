Imports NonNull = lombok.NonNull
Imports ComputationGraph = org.deeplearning4j.nn.graph.ComputationGraph
Imports MultiLayerNetwork = org.deeplearning4j.nn.multilayer.MultiLayerNetwork

'
' *  ******************************************************************************
' *  *
' *  *
' *  * This program and the accompanying materials are made available under the
' *  * terms of the Apache License, Version 2.0 which is available at
' *  * https://www.apache.org/licenses/LICENSE-2.0.
' *  *
' *  *  See the NOTICE file distributed with this work for additional
' *  *  information regarding copyright ownership.
' *  * Unless required by applicable law or agreed to in writing, software
' *  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
' *  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
' *  * License for the specific language governing permissions and limitations
' *  * under the License.
' *  *
' *  * SPDX-License-Identifier: Apache-2.0
' *  *****************************************************************************
' 
Namespace org.deeplearning4j.rl4j.network

	Public Class NetworkHelper

		''' <summary>
		''' Create a <seealso cref="INetworkHandler"/> with explicit network inputs to channel names mapping </summary>
		''' <param name="model"> A <seealso cref="ComputationGraph"/> instance </param>
		''' <param name="networkInputsToChannelNameMap"> A <seealso cref="ChannelToNetworkInputMapper.NetworkInputToChannelBinding"/> array
		'''                                      describing which observation channels to feed to which network inputs. </param>
		''' <param name="channelNames"> The list of channel names generated by the transform process. Should be in the same order. </param>
		''' <param name="labelNames"> The names of the network's output labels </param>
		''' <param name="gradientName"> The name of the network's gradient </param>
		''' <returns> A <seealso cref="INetworkHandler"/> </returns>
'JAVA TO VB CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
'ORIGINAL LINE: public INetworkHandler buildHandler(org.deeplearning4j.nn.graph.ComputationGraph model, @NonNull ChannelToNetworkInputMapper.NetworkInputToChannelBinding[] networkInputsToChannelNameMap, String[] channelNames, String[] labelNames, String gradientName)
		Public Overridable Function buildHandler(ByVal model As ComputationGraph, ByVal networkInputsToChannelNameMap() As ChannelToNetworkInputMapper.NetworkInputToChannelBinding, ByVal channelNames() As String, ByVal labelNames() As String, ByVal gradientName As String) As INetworkHandler
			Dim networkInputNames() As String = model.Configuration.getNetworkInputs().toArray(New String(){})

			Dim mapper As New ChannelToNetworkInputMapper(networkInputsToChannelNameMap, networkInputNames, channelNames)
			Return New ComputationGraphHandler(model, labelNames, gradientName, mapper)
		End Function

		''' <summary>
		''' Create a <seealso cref="INetworkHandler"/> with the single network input mapped to a specific observation channel </summary>
		''' <param name="model"> A <seealso cref="ComputationGraph"/> instance </param>
		''' <param name="networkInputChannel"> The name of the observation channel to use as the network's input.
		'''                            Empty to use the first channel. </param>
		''' <param name="channelNames"> The list of channel names generated by the transform process. Should be in the same order. </param>
		''' <param name="labelNames"> The names of the network's output labels </param>
		''' <param name="gradientName"> The name of the network's gradient </param>
		''' <returns> A <seealso cref="INetworkHandler"/> </returns>
		Public Overridable Function buildHandler(ByVal model As ComputationGraph, ByVal networkInputChannel As String, ByVal channelNames() As String, ByVal labelNames() As String, ByVal gradientName As String) As INetworkHandler
			Dim channelIdx As Integer = findChannelIdx(channelNames, networkInputChannel)
			Return New ComputationGraphHandler(model, labelNames, gradientName, channelIdx)
		End Function

		''' <summary>
		''' Create a <seealso cref="INetworkHandler"/> with the single network input mapped to a specific observation channel </summary>
		''' <param name="model"> A <seealso cref="MultiLayerNetwork"/> instance </param>
		''' <param name="networkInputChannel"> The name of the observation channel to use as the network's input.
		'''                            Empty to use the first channel. </param>
		''' <param name="channelNames"> The list of channel names generated by the transform process. Should be in the same order. </param>
		''' <param name="labelName"> The name of the network's output label </param>
		''' <param name="gradientName"> The name of the network's gradient </param>
		''' <returns> A <seealso cref="INetworkHandler"/> </returns>
		Public Overridable Function buildHandler(ByVal model As MultiLayerNetwork, ByVal networkInputChannel As String, ByVal channelNames() As String, ByVal labelName As String, ByVal gradientName As String) As INetworkHandler
			Dim channelIdx As Integer = findChannelIdx(channelNames, networkInputChannel)
			Return New MultiLayerNetworkHandler(model, labelName, gradientName, channelIdx)
		End Function

		Private Function findChannelIdx(ByVal channelNames() As String, ByVal channelName As String) As Integer
			' When the channel name or the channelNames is null or empty, always use the first channel
			If channelName Is Nothing OrElse channelName.Length = 0 OrElse channelNames Is Nothing OrElse channelNames.Length = 0 Then
				Return 0
			End If

			For i As Integer = 0 To channelNames.Length - 1
				If String.ReferenceEquals(channelNames(i), channelName) Then
					Return i
				End If
			Next i

			Throw New System.ArgumentException("The channel '" & channelName & "' was not found in channelNames.")
		End Function
	End Class

End Namespace