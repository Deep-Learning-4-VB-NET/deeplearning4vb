Imports com.google.flatbuffers

' automatically generated by the FlatBuffers compiler, do not modify
'
' *  ******************************************************************************
' *  *
' *  *
' *  * This program and the accompanying materials are made available under the
' *  * terms of the Apache License, Version 2.0 which is available at
' *  * https://www.apache.org/licenses/LICENSE-2.0.
' *  *
' *  *  See the NOTICE file distributed with this work for additional
' *  *  information regarding copyright ownership.
' *  * Unless required by applicable law or agreed to in writing, software
' *  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
' *  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
' *  * License for the specific language governing permissions and limitations
' *  * under the License.
' *  *
' *  * SPDX-License-Identifier: Apache-2.0
' *  *****************************************************************************
' 
Namespace org.nd4j.graph

'JAVA TO VB CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
'ORIGINAL LINE: @SuppressWarnings("unused") public final class IntTriple extends Table
	Public NotInheritable Class IntTriple
		Inherits Table

	  Public Shared Function getRootAsIntTriple(ByVal _bb As ByteBuffer) As IntTriple
		  Return getRootAsIntTriple(_bb, New IntTriple())
	  End Function
	  Public Shared Function getRootAsIntTriple(ByVal _bb As ByteBuffer, ByVal obj As IntTriple) As IntTriple
		  _bb.order(ByteOrder.LITTLE_ENDIAN)
		  Return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
	  End Function
	  Public Sub __init(ByVal _i As Integer, ByVal _bb As ByteBuffer)
		  bb_pos = _i
		  bb = _bb
		  vtable_start = bb_pos - bb.getInt(bb_pos)
		  vtable_size = bb.getShort(vtable_start)
	  End Sub
	  Public Function __assign(ByVal _i As Integer, ByVal _bb As ByteBuffer) As IntTriple
		  __init(_i, _bb)
		  Return Me
	  End Function

	  Public Function first() As Integer
		  Dim o As Integer = __offset(4)
		  Return If(o <> 0, bb.getInt(o + bb_pos), 0)
	  End Function
	  Public Function second() As Integer
		  Dim o As Integer = __offset(6)
		  Return If(o <> 0, bb.getInt(o + bb_pos), 0)
	  End Function
	  Public Function third() As Integer
		  Dim o As Integer = __offset(8)
		  Return If(o <> 0, bb.getInt(o + bb_pos), 0)
	  End Function

	  Public Shared Function createIntTriple(ByVal builder As FlatBufferBuilder, ByVal first As Integer, ByVal second As Integer, ByVal third As Integer) As Integer
		builder.startObject(3)
		IntTriple.addThird(builder, third)
		IntTriple.addSecond(builder, second)
		IntTriple.addFirst(builder, first)
		Return IntTriple.endIntTriple(builder)
	  End Function

	  Public Shared Sub startIntTriple(ByVal builder As FlatBufferBuilder)
		  builder.startObject(3)
	  End Sub
	  Public Shared Sub addFirst(ByVal builder As FlatBufferBuilder, ByVal first As Integer)
		  builder.addInt(0, first, 0)
	  End Sub
	  Public Shared Sub addSecond(ByVal builder As FlatBufferBuilder, ByVal second As Integer)
		  builder.addInt(1, second, 0)
	  End Sub
	  Public Shared Sub addThird(ByVal builder As FlatBufferBuilder, ByVal third As Integer)
		  builder.addInt(2, third, 0)
	  End Sub
	  Public Shared Function endIntTriple(ByVal builder As FlatBufferBuilder) As Integer
		Dim o As Integer = builder.endObject()
		Return o
	  End Function
	End Class


End Namespace