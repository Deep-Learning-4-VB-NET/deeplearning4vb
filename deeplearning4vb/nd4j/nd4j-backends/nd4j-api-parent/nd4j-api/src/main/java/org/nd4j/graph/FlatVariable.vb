Imports com.google.flatbuffers

' automatically generated by the FlatBuffers compiler, do not modify
'
' *  ******************************************************************************
' *  *
' *  *
' *  * This program and the accompanying materials are made available under the
' *  * terms of the Apache License, Version 2.0 which is available at
' *  * https://www.apache.org/licenses/LICENSE-2.0.
' *  *
' *  *  See the NOTICE file distributed with this work for additional
' *  *  information regarding copyright ownership.
' *  * Unless required by applicable law or agreed to in writing, software
' *  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
' *  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
' *  * License for the specific language governing permissions and limitations
' *  * under the License.
' *  *
' *  * SPDX-License-Identifier: Apache-2.0
' *  *****************************************************************************
' 
Namespace org.nd4j.graph

'JAVA TO VB CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
'ORIGINAL LINE: @SuppressWarnings("unused") public final class FlatVariable extends Table
	Public NotInheritable Class FlatVariable
		Inherits Table

	  Public Shared Function getRootAsFlatVariable(ByVal _bb As ByteBuffer) As FlatVariable
		  Return getRootAsFlatVariable(_bb, New FlatVariable())
	  End Function
	  Public Shared Function getRootAsFlatVariable(ByVal _bb As ByteBuffer, ByVal obj As FlatVariable) As FlatVariable
		  _bb.order(ByteOrder.LITTLE_ENDIAN)
		  Return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
	  End Function
	  Public Sub __init(ByVal _i As Integer, ByVal _bb As ByteBuffer)
		  bb_pos = _i
		  bb = _bb
		  vtable_start = bb_pos - bb.getInt(bb_pos)
		  vtable_size = bb.getShort(vtable_start)
	  End Sub
	  Public Function __assign(ByVal _i As Integer, ByVal _bb As ByteBuffer) As FlatVariable
		  __init(_i, _bb)
		  Return Me
	  End Function

	  Public Function id() As IntPair
		  Return id(New IntPair())
	  End Function
	  Public Function id(ByVal obj As IntPair) As IntPair
		  Dim o As Integer = __offset(4)
		  Return If(o <> 0, obj.__assign(__indirect(o + bb_pos), bb), Nothing)
	  End Function
	  Public Function name() As String
		  Dim o As Integer = __offset(6)
		  Return If(o <> 0, __string(o + bb_pos), Nothing)
	  End Function
	  Public Function nameAsByteBuffer() As ByteBuffer
		  Return __vector_as_bytebuffer(6, 1)
	  End Function
	  Public Function nameInByteBuffer(ByVal _bb As ByteBuffer) As ByteBuffer
		  Return __vector_in_bytebuffer(_bb, 6, 1)
	  End Function
	  Public Function dtype() As SByte
		  Dim o As Integer = __offset(8)
		  Return If(o <> 0, bb.get(o + bb_pos), 0)
	  End Function
	  Public Function shape(ByVal j As Integer) As Long
		  Dim o As Integer = __offset(10)
		  Return If(o <> 0, bb.getLong(__vector(o) + j * 8), 0)
	  End Function
	  Public Function shapeLength() As Integer
		  Dim o As Integer = __offset(10)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function
	  Public Function shapeAsByteBuffer() As ByteBuffer
		  Return __vector_as_bytebuffer(10, 8)
	  End Function
	  Public Function shapeInByteBuffer(ByVal _bb As ByteBuffer) As ByteBuffer
		  Return __vector_in_bytebuffer(_bb, 10, 8)
	  End Function
	  Public Function ndarray() As FlatArray
		  Return ndarray(New FlatArray())
	  End Function
	  Public Function ndarray(ByVal obj As FlatArray) As FlatArray
		  Dim o As Integer = __offset(12)
		  Return If(o <> 0, obj.__assign(__indirect(o + bb_pos), bb), Nothing)
	  End Function
	  Public Function device() As Integer
		  Dim o As Integer = __offset(14)
		  Return If(o <> 0, bb.getInt(o + bb_pos), 0)
	  End Function
	  Public Function variabletype() As SByte
		  Dim o As Integer = __offset(16)
		  Return If(o <> 0, bb.get(o + bb_pos), 0)
	  End Function
	  Public Function controlDeps(ByVal j As Integer) As String
		  Dim o As Integer = __offset(18)
		  Return If(o <> 0, __string(__vector(o) + j * 4), Nothing)
	  End Function
	  Public Function controlDepsLength() As Integer
		  Dim o As Integer = __offset(18)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function
	  Public Function controlDepForOp(ByVal j As Integer) As String
		  Dim o As Integer = __offset(20)
		  Return If(o <> 0, __string(__vector(o) + j * 4), Nothing)
	  End Function
	  Public Function controlDepForOpLength() As Integer
		  Dim o As Integer = __offset(20)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function
	  Public Function controlDepsForVar(ByVal j As Integer) As String
		  Dim o As Integer = __offset(22)
		  Return If(o <> 0, __string(__vector(o) + j * 4), Nothing)
	  End Function
	  Public Function controlDepsForVarLength() As Integer
		  Dim o As Integer = __offset(22)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function

	  Public Shared Function createFlatVariable(ByVal builder As FlatBufferBuilder, ByVal idOffset As Integer, ByVal nameOffset As Integer, ByVal dtype As SByte, ByVal shapeOffset As Integer, ByVal ndarrayOffset As Integer, ByVal device As Integer, ByVal variabletype As SByte, ByVal controlDepsOffset As Integer, ByVal controlDepForOpOffset As Integer, ByVal controlDepsForVarOffset As Integer) As Integer
		builder.startObject(10)
		FlatVariable.addControlDepsForVar(builder, controlDepsForVarOffset)
		FlatVariable.addControlDepForOp(builder, controlDepForOpOffset)
		FlatVariable.addControlDeps(builder, controlDepsOffset)
		FlatVariable.addDevice(builder, device)
		FlatVariable.addNdarray(builder, ndarrayOffset)
		FlatVariable.addShape(builder, shapeOffset)
		FlatVariable.addName(builder, nameOffset)
		FlatVariable.addId(builder, idOffset)
		FlatVariable.addVariabletype(builder, variabletype)
		FlatVariable.addDtype(builder, dtype)
		Return FlatVariable.endFlatVariable(builder)
	  End Function

	  Public Shared Sub startFlatVariable(ByVal builder As FlatBufferBuilder)
		  builder.startObject(10)
	  End Sub
	  Public Shared Sub addId(ByVal builder As FlatBufferBuilder, ByVal idOffset As Integer)
		  builder.addOffset(0, idOffset, 0)
	  End Sub
	  Public Shared Sub addName(ByVal builder As FlatBufferBuilder, ByVal nameOffset As Integer)
		  builder.addOffset(1, nameOffset, 0)
	  End Sub
	  Public Shared Sub addDtype(ByVal builder As FlatBufferBuilder, ByVal dtype As SByte)
		  builder.addByte(2, dtype, 0)
	  End Sub
	  Public Shared Sub addShape(ByVal builder As FlatBufferBuilder, ByVal shapeOffset As Integer)
		  builder.addOffset(3, shapeOffset, 0)
	  End Sub
	  Public Shared Function createShapeVector(ByVal builder As FlatBufferBuilder, ByVal data() As Long) As Integer
		  builder.startVector(8, data.Length, 8)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addLong(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startShapeVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(8, numElems, 8)
	  End Sub
	  Public Shared Sub addNdarray(ByVal builder As FlatBufferBuilder, ByVal ndarrayOffset As Integer)
		  builder.addOffset(4, ndarrayOffset, 0)
	  End Sub
	  Public Shared Sub addDevice(ByVal builder As FlatBufferBuilder, ByVal device As Integer)
		  builder.addInt(5, device, 0)
	  End Sub
	  Public Shared Sub addVariabletype(ByVal builder As FlatBufferBuilder, ByVal variabletype As SByte)
		  builder.addByte(6, variabletype, 0)
	  End Sub
	  Public Shared Sub addControlDeps(ByVal builder As FlatBufferBuilder, ByVal controlDepsOffset As Integer)
		  builder.addOffset(7, controlDepsOffset, 0)
	  End Sub
	  Public Shared Function createControlDepsVector(ByVal builder As FlatBufferBuilder, ByVal data() As Integer) As Integer
		  builder.startVector(4, data.Length, 4)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addOffset(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startControlDepsVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(4, numElems, 4)
	  End Sub
	  Public Shared Sub addControlDepForOp(ByVal builder As FlatBufferBuilder, ByVal controlDepForOpOffset As Integer)
		  builder.addOffset(8, controlDepForOpOffset, 0)
	  End Sub
	  Public Shared Function createControlDepForOpVector(ByVal builder As FlatBufferBuilder, ByVal data() As Integer) As Integer
		  builder.startVector(4, data.Length, 4)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addOffset(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startControlDepForOpVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(4, numElems, 4)
	  End Sub
	  Public Shared Sub addControlDepsForVar(ByVal builder As FlatBufferBuilder, ByVal controlDepsForVarOffset As Integer)
		  builder.addOffset(9, controlDepsForVarOffset, 0)
	  End Sub
	  Public Shared Function createControlDepsForVarVector(ByVal builder As FlatBufferBuilder, ByVal data() As Integer) As Integer
		  builder.startVector(4, data.Length, 4)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addOffset(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startControlDepsForVarVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(4, numElems, 4)
	  End Sub
	  Public Shared Function endFlatVariable(ByVal builder As FlatBufferBuilder) As Integer
		Dim o As Integer = builder.endObject()
		Return o
	  End Function
	  Public Shared Sub finishFlatVariableBuffer(ByVal builder As FlatBufferBuilder, ByVal offset As Integer)
		  builder.finish(offset)
	  End Sub
	  Public Shared Sub finishSizePrefixedFlatVariableBuffer(ByVal builder As FlatBufferBuilder, ByVal offset As Integer)
		  builder.finishSizePrefixed(offset)
	  End Sub
	End Class


End Namespace