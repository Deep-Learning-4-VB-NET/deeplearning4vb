Imports com.google.flatbuffers

' automatically generated by the FlatBuffers compiler, do not modify
'
' *  ******************************************************************************
' *  *
' *  *
' *  * This program and the accompanying materials are made available under the
' *  * terms of the Apache License, Version 2.0 which is available at
' *  * https://www.apache.org/licenses/LICENSE-2.0.
' *  *
' *  *  See the NOTICE file distributed with this work for additional
' *  *  information regarding copyright ownership.
' *  * Unless required by applicable law or agreed to in writing, software
' *  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
' *  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
' *  * License for the specific language governing permissions and limitations
' *  * under the License.
' *  *
' *  * SPDX-License-Identifier: Apache-2.0
' *  *****************************************************************************
' 
Namespace org.nd4j.graph

'JAVA TO VB CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
'ORIGINAL LINE: @SuppressWarnings("unused") public final class FlatArray extends Table
	Public NotInheritable Class FlatArray
		Inherits Table

	  Public Shared Function getRootAsFlatArray(ByVal _bb As ByteBuffer) As FlatArray
		  Return getRootAsFlatArray(_bb, New FlatArray())
	  End Function
	  Public Shared Function getRootAsFlatArray(ByVal _bb As ByteBuffer, ByVal obj As FlatArray) As FlatArray
		  _bb.order(ByteOrder.LITTLE_ENDIAN)
		  Return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
	  End Function
	  Public Sub __init(ByVal _i As Integer, ByVal _bb As ByteBuffer)
		  bb_pos = _i
		  bb = _bb
		  vtable_start = bb_pos - bb.getInt(bb_pos)
		  vtable_size = bb.getShort(vtable_start)
	  End Sub
	  Public Function __assign(ByVal _i As Integer, ByVal _bb As ByteBuffer) As FlatArray
		  __init(_i, _bb)
		  Return Me
	  End Function

	  Public Function shape(ByVal j As Integer) As Long
		  Dim o As Integer = __offset(4)
		  Return If(o <> 0, bb.getLong(__vector(o) + j * 8), 0)
	  End Function
	  Public Function shapeLength() As Integer
		  Dim o As Integer = __offset(4)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function
	  Public Function shapeAsByteBuffer() As ByteBuffer
		  Return __vector_as_bytebuffer(4, 8)
	  End Function
	  Public Function shapeInByteBuffer(ByVal _bb As ByteBuffer) As ByteBuffer
		  Return __vector_in_bytebuffer(_bb, 4, 8)
	  End Function
	  Public Function buffer(ByVal j As Integer) As SByte
		  Dim o As Integer = __offset(6)
		  Return If(o <> 0, bb.get(__vector(o) + j * 1), 0)
	  End Function
	  Public Function bufferLength() As Integer
		  Dim o As Integer = __offset(6)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function
	  Public Function bufferAsByteBuffer() As ByteBuffer
		  Return __vector_as_bytebuffer(6, 1)
	  End Function
	  Public Function bufferInByteBuffer(ByVal _bb As ByteBuffer) As ByteBuffer
		  Return __vector_in_bytebuffer(_bb, 6, 1)
	  End Function
	  Public Function dtype() As SByte
		  Dim o As Integer = __offset(8)
		  Return If(o <> 0, bb.get(o + bb_pos), 0)
	  End Function
	  Public Function byteOrder() As SByte
		  Dim o As Integer = __offset(10)
		  Return If(o <> 0, bb.get(o + bb_pos), 0)
	  End Function

'JAVA TO VB CONVERTER NOTE: The parameter byteOrder was renamed since it may cause conflicts with calls to static members of the user-defined type with this name:
	  Public Shared Function createFlatArray(ByVal builder As FlatBufferBuilder, ByVal shapeOffset As Integer, ByVal bufferOffset As Integer, ByVal dtype As SByte, ByVal byteOrder_Conflict As SByte) As Integer
		builder.startObject(4)
		FlatArray.addBuffer(builder, bufferOffset)
		FlatArray.addShape(builder, shapeOffset)
		FlatArray.addByteOrder(builder, byteOrder_Conflict)
		FlatArray.addDtype(builder, dtype)
		Return FlatArray.endFlatArray(builder)
	  End Function

	  Public Shared Sub startFlatArray(ByVal builder As FlatBufferBuilder)
		  builder.startObject(4)
	  End Sub
	  Public Shared Sub addShape(ByVal builder As FlatBufferBuilder, ByVal shapeOffset As Integer)
		  builder.addOffset(0, shapeOffset, 0)
	  End Sub
	  Public Shared Function createShapeVector(ByVal builder As FlatBufferBuilder, ByVal data() As Long) As Integer
		  builder.startVector(8, data.Length, 8)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addLong(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startShapeVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(8, numElems, 8)
	  End Sub
	  Public Shared Sub addBuffer(ByVal builder As FlatBufferBuilder, ByVal bufferOffset As Integer)
		  builder.addOffset(1, bufferOffset, 0)
	  End Sub
	  Public Shared Function createBufferVector(ByVal builder As FlatBufferBuilder, ByVal data() As SByte) As Integer
		  builder.startVector(1, data.Length, 1)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addByte(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startBufferVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(1, numElems, 1)
	  End Sub
	  Public Shared Sub addDtype(ByVal builder As FlatBufferBuilder, ByVal dtype As SByte)
		  builder.addByte(2, dtype, 0)
	  End Sub
'JAVA TO VB CONVERTER NOTE: The parameter byteOrder was renamed since it may cause conflicts with calls to static members of the user-defined type with this name:
	  Public Shared Sub addByteOrder(ByVal builder As FlatBufferBuilder, ByVal byteOrder_Conflict As SByte)
		  builder.addByte(3, byteOrder_Conflict, 0)
	  End Sub
	  Public Shared Function endFlatArray(ByVal builder As FlatBufferBuilder) As Integer
		Dim o As Integer = builder.endObject()
		Return o
	  End Function
	  Public Shared Sub finishFlatArrayBuffer(ByVal builder As FlatBufferBuilder, ByVal offset As Integer)
		  builder.finish(offset)
	  End Sub
	  Public Shared Sub finishSizePrefixedFlatArrayBuffer(ByVal builder As FlatBufferBuilder, ByVal offset As Integer)
		  builder.finishSizePrefixed(offset)
	  End Sub
	End Class


End Namespace