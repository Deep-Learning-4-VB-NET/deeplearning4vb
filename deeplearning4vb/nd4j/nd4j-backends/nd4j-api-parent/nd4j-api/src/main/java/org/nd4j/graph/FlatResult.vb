Imports com.google.flatbuffers

' automatically generated by the FlatBuffers compiler, do not modify
'
' *  ******************************************************************************
' *  *
' *  *
' *  * This program and the accompanying materials are made available under the
' *  * terms of the Apache License, Version 2.0 which is available at
' *  * https://www.apache.org/licenses/LICENSE-2.0.
' *  *
' *  *  See the NOTICE file distributed with this work for additional
' *  *  information regarding copyright ownership.
' *  * Unless required by applicable law or agreed to in writing, software
' *  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
' *  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
' *  * License for the specific language governing permissions and limitations
' *  * under the License.
' *  *
' *  * SPDX-License-Identifier: Apache-2.0
' *  *****************************************************************************
' 
Namespace org.nd4j.graph

'JAVA TO VB CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
'ORIGINAL LINE: @SuppressWarnings("unused") public final class FlatResult extends Table
	Public NotInheritable Class FlatResult
		Inherits Table

	  Public Shared Function getRootAsFlatResult(ByVal _bb As ByteBuffer) As FlatResult
		  Return getRootAsFlatResult(_bb, New FlatResult())
	  End Function
	  Public Shared Function getRootAsFlatResult(ByVal _bb As ByteBuffer, ByVal obj As FlatResult) As FlatResult
		  _bb.order(ByteOrder.LITTLE_ENDIAN)
		  Return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
	  End Function
	  Public Sub __init(ByVal _i As Integer, ByVal _bb As ByteBuffer)
		  bb_pos = _i
		  bb = _bb
		  vtable_start = bb_pos - bb.getInt(bb_pos)
		  vtable_size = bb.getShort(vtable_start)
	  End Sub
	  Public Function __assign(ByVal _i As Integer, ByVal _bb As ByteBuffer) As FlatResult
		  __init(_i, _bb)
		  Return Me
	  End Function

	  Public Function id() As Long
		  Dim o As Integer = __offset(4)
		  Return If(o <> 0, bb.getLong(o + bb_pos), 0L)
	  End Function
	  Public Function variables(ByVal j As Integer) As FlatVariable
		  Return variables(New FlatVariable(), j)
	  End Function
	  Public Function variables(ByVal obj As FlatVariable, ByVal j As Integer) As FlatVariable
		  Dim o As Integer = __offset(6)
		  Return If(o <> 0, obj.__assign(__indirect(__vector(o) + j * 4), bb), Nothing)
	  End Function
	  Public Function variablesLength() As Integer
		  Dim o As Integer = __offset(6)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function
	  Public Function timing(ByVal j As Integer) As FlatTiming
		  Return timing(New FlatTiming(), j)
	  End Function
	  Public Function timing(ByVal obj As FlatTiming, ByVal j As Integer) As FlatTiming
		  Dim o As Integer = __offset(8)
		  Return If(o <> 0, obj.__assign(__indirect(__vector(o) + j * 4), bb), Nothing)
	  End Function
	  Public Function timingLength() As Integer
		  Dim o As Integer = __offset(8)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function
	  Public Function footprintForward() As Long
		  Dim o As Integer = __offset(10)
		  Return If(o <> 0, bb.getLong(o + bb_pos), 0L)
	  End Function
	  Public Function footprintBackward() As Long
		  Dim o As Integer = __offset(12)
		  Return If(o <> 0, bb.getLong(o + bb_pos), 0L)
	  End Function

	  Public Shared Function createFlatResult(ByVal builder As FlatBufferBuilder, ByVal id As Long, ByVal variablesOffset As Integer, ByVal timingOffset As Integer, ByVal footprintForward As Long, ByVal footprintBackward As Long) As Integer
		builder.startObject(5)
		FlatResult.addFootprintBackward(builder, footprintBackward)
		FlatResult.addFootprintForward(builder, footprintForward)
		FlatResult.addId(builder, id)
		FlatResult.addTiming(builder, timingOffset)
		FlatResult.addVariables(builder, variablesOffset)
		Return FlatResult.endFlatResult(builder)
	  End Function

	  Public Shared Sub startFlatResult(ByVal builder As FlatBufferBuilder)
		  builder.startObject(5)
	  End Sub
	  Public Shared Sub addId(ByVal builder As FlatBufferBuilder, ByVal id As Long)
		  builder.addLong(0, id, 0L)
	  End Sub
	  Public Shared Sub addVariables(ByVal builder As FlatBufferBuilder, ByVal variablesOffset As Integer)
		  builder.addOffset(1, variablesOffset, 0)
	  End Sub
	  Public Shared Function createVariablesVector(ByVal builder As FlatBufferBuilder, ByVal data() As Integer) As Integer
		  builder.startVector(4, data.Length, 4)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addOffset(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startVariablesVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(4, numElems, 4)
	  End Sub
	  Public Shared Sub addTiming(ByVal builder As FlatBufferBuilder, ByVal timingOffset As Integer)
		  builder.addOffset(2, timingOffset, 0)
	  End Sub
	  Public Shared Function createTimingVector(ByVal builder As FlatBufferBuilder, ByVal data() As Integer) As Integer
		  builder.startVector(4, data.Length, 4)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addOffset(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startTimingVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(4, numElems, 4)
	  End Sub
	  Public Shared Sub addFootprintForward(ByVal builder As FlatBufferBuilder, ByVal footprintForward As Long)
		  builder.addLong(3, footprintForward, 0L)
	  End Sub
	  Public Shared Sub addFootprintBackward(ByVal builder As FlatBufferBuilder, ByVal footprintBackward As Long)
		  builder.addLong(4, footprintBackward, 0L)
	  End Sub
	  Public Shared Function endFlatResult(ByVal builder As FlatBufferBuilder) As Integer
		Dim o As Integer = builder.endObject()
		Return o
	  End Function
	  Public Shared Sub finishFlatResultBuffer(ByVal builder As FlatBufferBuilder, ByVal offset As Integer)
		  builder.finish(offset)
	  End Sub
	  Public Shared Sub finishSizePrefixedFlatResultBuffer(ByVal builder As FlatBufferBuilder, ByVal offset As Integer)
		  builder.finishSizePrefixed(offset)
	  End Sub
	End Class


End Namespace