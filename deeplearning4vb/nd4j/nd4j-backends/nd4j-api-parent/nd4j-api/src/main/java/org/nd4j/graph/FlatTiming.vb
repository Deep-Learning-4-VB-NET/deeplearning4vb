Imports com.google.flatbuffers

' automatically generated by the FlatBuffers compiler, do not modify
'
' *  ******************************************************************************
' *  *
' *  *
' *  * This program and the accompanying materials are made available under the
' *  * terms of the Apache License, Version 2.0 which is available at
' *  * https://www.apache.org/licenses/LICENSE-2.0.
' *  *
' *  *  See the NOTICE file distributed with this work for additional
' *  *  information regarding copyright ownership.
' *  * Unless required by applicable law or agreed to in writing, software
' *  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
' *  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
' *  * License for the specific language governing permissions and limitations
' *  * under the License.
' *  *
' *  * SPDX-License-Identifier: Apache-2.0
' *  *****************************************************************************
' 
Namespace org.nd4j.graph

'JAVA TO VB CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
'ORIGINAL LINE: @SuppressWarnings("unused") public final class FlatTiming extends Table
	Public NotInheritable Class FlatTiming
		Inherits Table

	  Public Shared Function getRootAsFlatTiming(ByVal _bb As ByteBuffer) As FlatTiming
		  Return getRootAsFlatTiming(_bb, New FlatTiming())
	  End Function
	  Public Shared Function getRootAsFlatTiming(ByVal _bb As ByteBuffer, ByVal obj As FlatTiming) As FlatTiming
		  _bb.order(ByteOrder.LITTLE_ENDIAN)
		  Return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
	  End Function
	  Public Sub __init(ByVal _i As Integer, ByVal _bb As ByteBuffer)
		  bb_pos = _i
		  bb = _bb
		  vtable_start = bb_pos - bb.getInt(bb_pos)
		  vtable_size = bb.getShort(vtable_start)
	  End Sub
	  Public Function __assign(ByVal _i As Integer, ByVal _bb As ByteBuffer) As FlatTiming
		  __init(_i, _bb)
		  Return Me
	  End Function

	  Public Function id() As Integer
		  Dim o As Integer = __offset(4)
		  Return If(o <> 0, bb.getInt(o + bb_pos), 0)
	  End Function
	  Public Function name() As String
		  Dim o As Integer = __offset(6)
		  Return If(o <> 0, __string(o + bb_pos), Nothing)
	  End Function
	  Public Function nameAsByteBuffer() As ByteBuffer
		  Return __vector_as_bytebuffer(6, 1)
	  End Function
	  Public Function nameInByteBuffer(ByVal _bb As ByteBuffer) As ByteBuffer
		  Return __vector_in_bytebuffer(_bb, 6, 1)
	  End Function
	  Public Function timing() As LongPair
		  Return timing(New LongPair())
	  End Function
	  Public Function timing(ByVal obj As LongPair) As LongPair
		  Dim o As Integer = __offset(8)
		  Return If(o <> 0, obj.__assign(__indirect(o + bb_pos), bb), Nothing)
	  End Function

	  Public Shared Function createFlatTiming(ByVal builder As FlatBufferBuilder, ByVal id As Integer, ByVal nameOffset As Integer, ByVal timingOffset As Integer) As Integer
		builder.startObject(3)
		FlatTiming.addTiming(builder, timingOffset)
		FlatTiming.addName(builder, nameOffset)
		FlatTiming.addId(builder, id)
		Return FlatTiming.endFlatTiming(builder)
	  End Function

	  Public Shared Sub startFlatTiming(ByVal builder As FlatBufferBuilder)
		  builder.startObject(3)
	  End Sub
	  Public Shared Sub addId(ByVal builder As FlatBufferBuilder, ByVal id As Integer)
		  builder.addInt(0, id, 0)
	  End Sub
	  Public Shared Sub addName(ByVal builder As FlatBufferBuilder, ByVal nameOffset As Integer)
		  builder.addOffset(1, nameOffset, 0)
	  End Sub
	  Public Shared Sub addTiming(ByVal builder As FlatBufferBuilder, ByVal timingOffset As Integer)
		  builder.addOffset(2, timingOffset, 0)
	  End Sub
	  Public Shared Function endFlatTiming(ByVal builder As FlatBufferBuilder) As Integer
		Dim o As Integer = builder.endObject()
		Return o
	  End Function
	End Class


End Namespace