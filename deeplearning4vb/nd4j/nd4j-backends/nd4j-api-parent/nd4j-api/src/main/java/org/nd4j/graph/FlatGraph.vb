Imports com.google.flatbuffers

' automatically generated by the FlatBuffers compiler, do not modify
'
' *  ******************************************************************************
' *  *
' *  *
' *  * This program and the accompanying materials are made available under the
' *  * terms of the Apache License, Version 2.0 which is available at
' *  * https://www.apache.org/licenses/LICENSE-2.0.
' *  *
' *  *  See the NOTICE file distributed with this work for additional
' *  *  information regarding copyright ownership.
' *  * Unless required by applicable law or agreed to in writing, software
' *  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
' *  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
' *  * License for the specific language governing permissions and limitations
' *  * under the License.
' *  *
' *  * SPDX-License-Identifier: Apache-2.0
' *  *****************************************************************************
' 
Namespace org.nd4j.graph

'JAVA TO VB CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
'ORIGINAL LINE: @SuppressWarnings("unused") public final class FlatGraph extends Table
	Public NotInheritable Class FlatGraph
		Inherits Table

	  Public Shared Function getRootAsFlatGraph(ByVal _bb As ByteBuffer) As FlatGraph
		  Return getRootAsFlatGraph(_bb, New FlatGraph())
	  End Function
	  Public Shared Function getRootAsFlatGraph(ByVal _bb As ByteBuffer, ByVal obj As FlatGraph) As FlatGraph
		  _bb.order(ByteOrder.LITTLE_ENDIAN)
		  Return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
	  End Function
	  Public Sub __init(ByVal _i As Integer, ByVal _bb As ByteBuffer)
		  bb_pos = _i
		  bb = _bb
		  vtable_start = bb_pos - bb.getInt(bb_pos)
		  vtable_size = bb.getShort(vtable_start)
	  End Sub
	  Public Function __assign(ByVal _i As Integer, ByVal _bb As ByteBuffer) As FlatGraph
		  __init(_i, _bb)
		  Return Me
	  End Function

	  Public Function id() As Long
		  Dim o As Integer = __offset(4)
		  Return If(o <> 0, bb.getLong(o + bb_pos), 0L)
	  End Function
	  Public Function variables(ByVal j As Integer) As FlatVariable
		  Return variables(New FlatVariable(), j)
	  End Function
	  Public Function variables(ByVal obj As FlatVariable, ByVal j As Integer) As FlatVariable
		  Dim o As Integer = __offset(6)
		  Return If(o <> 0, obj.__assign(__indirect(__vector(o) + j * 4), bb), Nothing)
	  End Function
	  Public Function variablesLength() As Integer
		  Dim o As Integer = __offset(6)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function
	  Public Function nodes(ByVal j As Integer) As FlatNode
		  Return nodes(New FlatNode(), j)
	  End Function
	  Public Function nodes(ByVal obj As FlatNode, ByVal j As Integer) As FlatNode
		  Dim o As Integer = __offset(8)
		  Return If(o <> 0, obj.__assign(__indirect(__vector(o) + j * 4), bb), Nothing)
	  End Function
	  Public Function nodesLength() As Integer
		  Dim o As Integer = __offset(8)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function
	  Public Function outputs(ByVal j As Integer) As IntPair
		  Return outputs(New IntPair(), j)
	  End Function
	  Public Function outputs(ByVal obj As IntPair, ByVal j As Integer) As IntPair
		  Dim o As Integer = __offset(10)
		  Return If(o <> 0, obj.__assign(__indirect(__vector(o) + j * 4), bb), Nothing)
	  End Function
	  Public Function outputsLength() As Integer
		  Dim o As Integer = __offset(10)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function
	  Public Function configuration() As FlatConfiguration
		  Return configuration(New FlatConfiguration())
	  End Function
	  Public Function configuration(ByVal obj As FlatConfiguration) As FlatConfiguration
		  Dim o As Integer = __offset(12)
		  Return If(o <> 0, obj.__assign(__indirect(o + bb_pos), bb), Nothing)
	  End Function
	  Public Function placeholders(ByVal j As Integer) As String
		  Dim o As Integer = __offset(14)
		  Return If(o <> 0, __string(__vector(o) + j * 4), Nothing)
	  End Function
	  Public Function placeholdersLength() As Integer
		  Dim o As Integer = __offset(14)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function
	  Public Function lossVariables(ByVal j As Integer) As String
		  Dim o As Integer = __offset(16)
		  Return If(o <> 0, __string(__vector(o) + j * 4), Nothing)
	  End Function
	  Public Function lossVariablesLength() As Integer
		  Dim o As Integer = __offset(16)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function
	  Public Function trainingConfig() As String
		  Dim o As Integer = __offset(18)
		  Return If(o <> 0, __string(o + bb_pos), Nothing)
	  End Function
	  Public Function trainingConfigAsByteBuffer() As ByteBuffer
		  Return __vector_as_bytebuffer(18, 1)
	  End Function
	  Public Function trainingConfigInByteBuffer(ByVal _bb As ByteBuffer) As ByteBuffer
		  Return __vector_in_bytebuffer(_bb, 18, 1)
	  End Function
	  Public Function updaterState(ByVal j As Integer) As UpdaterState
		  Return updaterState(New UpdaterState(), j)
	  End Function
	  Public Function updaterState(ByVal obj As UpdaterState, ByVal j As Integer) As UpdaterState
		  Dim o As Integer = __offset(20)
		  Return If(o <> 0, obj.__assign(__indirect(__vector(o) + j * 4), bb), Nothing)
	  End Function
	  Public Function updaterStateLength() As Integer
		  Dim o As Integer = __offset(20)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function

	  Public Shared Function createFlatGraph(ByVal builder As FlatBufferBuilder, ByVal id As Long, ByVal variablesOffset As Integer, ByVal nodesOffset As Integer, ByVal outputsOffset As Integer, ByVal configurationOffset As Integer, ByVal placeholdersOffset As Integer, ByVal lossVariablesOffset As Integer, ByVal trainingConfigOffset As Integer, ByVal updaterStateOffset As Integer) As Integer
		builder.startObject(9)
		FlatGraph.addId(builder, id)
		FlatGraph.addUpdaterState(builder, updaterStateOffset)
		FlatGraph.addTrainingConfig(builder, trainingConfigOffset)
		FlatGraph.addLossVariables(builder, lossVariablesOffset)
		FlatGraph.addPlaceholders(builder, placeholdersOffset)
		FlatGraph.addConfiguration(builder, configurationOffset)
		FlatGraph.addOutputs(builder, outputsOffset)
		FlatGraph.addNodes(builder, nodesOffset)
		FlatGraph.addVariables(builder, variablesOffset)
		Return FlatGraph.endFlatGraph(builder)
	  End Function

	  Public Shared Sub startFlatGraph(ByVal builder As FlatBufferBuilder)
		  builder.startObject(9)
	  End Sub
	  Public Shared Sub addId(ByVal builder As FlatBufferBuilder, ByVal id As Long)
		  builder.addLong(0, id, 0L)
	  End Sub
	  Public Shared Sub addVariables(ByVal builder As FlatBufferBuilder, ByVal variablesOffset As Integer)
		  builder.addOffset(1, variablesOffset, 0)
	  End Sub
	  Public Shared Function createVariablesVector(ByVal builder As FlatBufferBuilder, ByVal data() As Integer) As Integer
		  builder.startVector(4, data.Length, 4)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addOffset(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startVariablesVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(4, numElems, 4)
	  End Sub
	  Public Shared Sub addNodes(ByVal builder As FlatBufferBuilder, ByVal nodesOffset As Integer)
		  builder.addOffset(2, nodesOffset, 0)
	  End Sub
	  Public Shared Function createNodesVector(ByVal builder As FlatBufferBuilder, ByVal data() As Integer) As Integer
		  builder.startVector(4, data.Length, 4)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addOffset(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startNodesVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(4, numElems, 4)
	  End Sub
	  Public Shared Sub addOutputs(ByVal builder As FlatBufferBuilder, ByVal outputsOffset As Integer)
		  builder.addOffset(3, outputsOffset, 0)
	  End Sub
	  Public Shared Function createOutputsVector(ByVal builder As FlatBufferBuilder, ByVal data() As Integer) As Integer
		  builder.startVector(4, data.Length, 4)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addOffset(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startOutputsVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(4, numElems, 4)
	  End Sub
	  Public Shared Sub addConfiguration(ByVal builder As FlatBufferBuilder, ByVal configurationOffset As Integer)
		  builder.addOffset(4, configurationOffset, 0)
	  End Sub
	  Public Shared Sub addPlaceholders(ByVal builder As FlatBufferBuilder, ByVal placeholdersOffset As Integer)
		  builder.addOffset(5, placeholdersOffset, 0)
	  End Sub
	  Public Shared Function createPlaceholdersVector(ByVal builder As FlatBufferBuilder, ByVal data() As Integer) As Integer
		  builder.startVector(4, data.Length, 4)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addOffset(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startPlaceholdersVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(4, numElems, 4)
	  End Sub
	  Public Shared Sub addLossVariables(ByVal builder As FlatBufferBuilder, ByVal lossVariablesOffset As Integer)
		  builder.addOffset(6, lossVariablesOffset, 0)
	  End Sub
	  Public Shared Function createLossVariablesVector(ByVal builder As FlatBufferBuilder, ByVal data() As Integer) As Integer
		  builder.startVector(4, data.Length, 4)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addOffset(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startLossVariablesVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(4, numElems, 4)
	  End Sub
	  Public Shared Sub addTrainingConfig(ByVal builder As FlatBufferBuilder, ByVal trainingConfigOffset As Integer)
		  builder.addOffset(7, trainingConfigOffset, 0)
	  End Sub
	  Public Shared Sub addUpdaterState(ByVal builder As FlatBufferBuilder, ByVal updaterStateOffset As Integer)
		  builder.addOffset(8, updaterStateOffset, 0)
	  End Sub
	  Public Shared Function createUpdaterStateVector(ByVal builder As FlatBufferBuilder, ByVal data() As Integer) As Integer
		  builder.startVector(4, data.Length, 4)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addOffset(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startUpdaterStateVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(4, numElems, 4)
	  End Sub
	  Public Shared Function endFlatGraph(ByVal builder As FlatBufferBuilder) As Integer
		Dim o As Integer = builder.endObject()
		Return o
	  End Function
	  Public Shared Sub finishFlatGraphBuffer(ByVal builder As FlatBufferBuilder, ByVal offset As Integer)
		  builder.finish(offset)
	  End Sub
	  Public Shared Sub finishSizePrefixedFlatGraphBuffer(ByVal builder As FlatBufferBuilder, ByVal offset As Integer)
		  builder.finishSizePrefixed(offset)
	  End Sub
	End Class


End Namespace