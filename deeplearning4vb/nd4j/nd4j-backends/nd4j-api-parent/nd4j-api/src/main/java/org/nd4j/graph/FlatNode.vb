Imports com.google.flatbuffers

' automatically generated by the FlatBuffers compiler, do not modify
'
' *  ******************************************************************************
' *  *
' *  *
' *  * This program and the accompanying materials are made available under the
' *  * terms of the Apache License, Version 2.0 which is available at
' *  * https://www.apache.org/licenses/LICENSE-2.0.
' *  *
' *  *  See the NOTICE file distributed with this work for additional
' *  *  information regarding copyright ownership.
' *  * Unless required by applicable law or agreed to in writing, software
' *  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
' *  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
' *  * License for the specific language governing permissions and limitations
' *  * under the License.
' *  *
' *  * SPDX-License-Identifier: Apache-2.0
' *  *****************************************************************************
' 
Namespace org.nd4j.graph

'JAVA TO VB CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
'ORIGINAL LINE: @SuppressWarnings("unused") public final class FlatNode extends Table
	Public NotInheritable Class FlatNode
		Inherits Table

	  Public Shared Function getRootAsFlatNode(ByVal _bb As ByteBuffer) As FlatNode
		  Return getRootAsFlatNode(_bb, New FlatNode())
	  End Function
	  Public Shared Function getRootAsFlatNode(ByVal _bb As ByteBuffer, ByVal obj As FlatNode) As FlatNode
		  _bb.order(ByteOrder.LITTLE_ENDIAN)
		  Return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
	  End Function
	  Public Sub __init(ByVal _i As Integer, ByVal _bb As ByteBuffer)
		  bb_pos = _i
		  bb = _bb
		  vtable_start = bb_pos - bb.getInt(bb_pos)
		  vtable_size = bb.getShort(vtable_start)
	  End Sub
	  Public Function __assign(ByVal _i As Integer, ByVal _bb As ByteBuffer) As FlatNode
		  __init(_i, _bb)
		  Return Me
	  End Function

	  Public Function id() As Integer
		  Dim o As Integer = __offset(4)
		  Return If(o <> 0, bb.getInt(o + bb_pos), 0)
	  End Function
	  Public Function name() As String
		  Dim o As Integer = __offset(6)
		  Return If(o <> 0, __string(o + bb_pos), Nothing)
	  End Function
	  Public Function nameAsByteBuffer() As ByteBuffer
		  Return __vector_as_bytebuffer(6, 1)
	  End Function
	  Public Function nameInByteBuffer(ByVal _bb As ByteBuffer) As ByteBuffer
		  Return __vector_in_bytebuffer(_bb, 6, 1)
	  End Function
	  Public Function opType() As SByte
		  Dim o As Integer = __offset(8)
		  Return If(o <> 0, bb.get(o + bb_pos), 0)
	  End Function
	  Public Function opNum() As Long
		  Dim o As Integer = __offset(10)
		  Return If(o <> 0, bb.getLong(o + bb_pos), 0L)
	  End Function
	  Public Function properties(ByVal j As Integer) As FlatProperties
		  Return properties(New FlatProperties(), j)
	  End Function
	  Public Function properties(ByVal obj As FlatProperties, ByVal j As Integer) As FlatProperties
		  Dim o As Integer = __offset(12)
		  Return If(o <> 0, obj.__assign(__indirect(__vector(o) + j * 4), bb), Nothing)
	  End Function
	  Public Function propertiesLength() As Integer
		  Dim o As Integer = __offset(12)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function
	  Public Function input(ByVal j As Integer) As Integer
		  Dim o As Integer = __offset(14)
		  Return If(o <> 0, bb.getInt(__vector(o) + j * 4), 0)
	  End Function
	  Public Function inputLength() As Integer
		  Dim o As Integer = __offset(14)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function
	  Public Function inputAsByteBuffer() As ByteBuffer
		  Return __vector_as_bytebuffer(14, 4)
	  End Function
	  Public Function inputInByteBuffer(ByVal _bb As ByteBuffer) As ByteBuffer
		  Return __vector_in_bytebuffer(_bb, 14, 4)
	  End Function
	  Public Function inputPaired(ByVal j As Integer) As IntPair
		  Return inputPaired(New IntPair(), j)
	  End Function
	  Public Function inputPaired(ByVal obj As IntPair, ByVal j As Integer) As IntPair
		  Dim o As Integer = __offset(16)
		  Return If(o <> 0, obj.__assign(__indirect(__vector(o) + j * 4), bb), Nothing)
	  End Function
	  Public Function inputPairedLength() As Integer
		  Dim o As Integer = __offset(16)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function
	  Public Function output(ByVal j As Integer) As Integer
		  Dim o As Integer = __offset(18)
		  Return If(o <> 0, bb.getInt(__vector(o) + j * 4), 0)
	  End Function
	  Public Function outputLength() As Integer
		  Dim o As Integer = __offset(18)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function
	  Public Function outputAsByteBuffer() As ByteBuffer
		  Return __vector_as_bytebuffer(18, 4)
	  End Function
	  Public Function outputInByteBuffer(ByVal _bb As ByteBuffer) As ByteBuffer
		  Return __vector_in_bytebuffer(_bb, 18, 4)
	  End Function
	  Public Function extraParams(ByVal j As Integer) As Double
		  Dim o As Integer = __offset(20)
		  Return If(o <> 0, bb.getDouble(__vector(o) + j * 8), 0)
	  End Function
	  Public Function extraParamsLength() As Integer
		  Dim o As Integer = __offset(20)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function
	  Public Function extraParamsAsByteBuffer() As ByteBuffer
		  Return __vector_as_bytebuffer(20, 8)
	  End Function
	  Public Function extraParamsInByteBuffer(ByVal _bb As ByteBuffer) As ByteBuffer
		  Return __vector_in_bytebuffer(_bb, 20, 8)
	  End Function
	  Public Function extraInteger(ByVal j As Integer) As Long
		  Dim o As Integer = __offset(22)
		  Return If(o <> 0, bb.getLong(__vector(o) + j * 8), 0)
	  End Function
	  Public Function extraIntegerLength() As Integer
		  Dim o As Integer = __offset(22)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function
	  Public Function extraIntegerAsByteBuffer() As ByteBuffer
		  Return __vector_as_bytebuffer(22, 8)
	  End Function
	  Public Function extraIntegerInByteBuffer(ByVal _bb As ByteBuffer) As ByteBuffer
		  Return __vector_in_bytebuffer(_bb, 22, 8)
	  End Function
	  Public Function extraBools(ByVal j As Integer) As Boolean
		  Dim o As Integer = __offset(24)
		  Return If(o <> 0, 0<>bb.get(__vector(o) + j * 1), False)
	  End Function
	  Public Function extraBoolsLength() As Integer
		  Dim o As Integer = __offset(24)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function
	  Public Function extraBoolsAsByteBuffer() As ByteBuffer
		  Return __vector_as_bytebuffer(24, 1)
	  End Function
	  Public Function extraBoolsInByteBuffer(ByVal _bb As ByteBuffer) As ByteBuffer
		  Return __vector_in_bytebuffer(_bb, 24, 1)
	  End Function
	  Public Function dimensions(ByVal j As Integer) As Integer
		  Dim o As Integer = __offset(26)
		  Return If(o <> 0, bb.getInt(__vector(o) + j * 4), 0)
	  End Function
	  Public Function dimensionsLength() As Integer
		  Dim o As Integer = __offset(26)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function
	  Public Function dimensionsAsByteBuffer() As ByteBuffer
		  Return __vector_as_bytebuffer(26, 4)
	  End Function
	  Public Function dimensionsInByteBuffer(ByVal _bb As ByteBuffer) As ByteBuffer
		  Return __vector_in_bytebuffer(_bb, 26, 4)
	  End Function
	  Public Function device() As Integer
		  Dim o As Integer = __offset(28)
		  Return If(o <> 0, bb.getInt(o + bb_pos), 0)
	  End Function
	  Public Function scopeId() As Integer
		  Dim o As Integer = __offset(30)
		  Return If(o <> 0, bb.getInt(o + bb_pos), 0)
	  End Function
	  Public Function scopeName() As String
		  Dim o As Integer = __offset(32)
		  Return If(o <> 0, __string(o + bb_pos), Nothing)
	  End Function
	  Public Function scopeNameAsByteBuffer() As ByteBuffer
		  Return __vector_as_bytebuffer(32, 1)
	  End Function
	  Public Function scopeNameInByteBuffer(ByVal _bb As ByteBuffer) As ByteBuffer
		  Return __vector_in_bytebuffer(_bb, 32, 1)
	  End Function
	  Public Function outputNames(ByVal j As Integer) As String
		  Dim o As Integer = __offset(34)
		  Return If(o <> 0, __string(__vector(o) + j * 4), Nothing)
	  End Function
	  Public Function outputNamesLength() As Integer
		  Dim o As Integer = __offset(34)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function
	  Public Function opName() As String
		  Dim o As Integer = __offset(36)
		  Return If(o <> 0, __string(o + bb_pos), Nothing)
	  End Function
	  Public Function opNameAsByteBuffer() As ByteBuffer
		  Return __vector_as_bytebuffer(36, 1)
	  End Function
	  Public Function opNameInByteBuffer(ByVal _bb As ByteBuffer) As ByteBuffer
		  Return __vector_in_bytebuffer(_bb, 36, 1)
	  End Function
	  Public Function outputTypes(ByVal j As Integer) As SByte
		  Dim o As Integer = __offset(38)
		  Return If(o <> 0, bb.get(__vector(o) + j * 1), 0)
	  End Function
	  Public Function outputTypesLength() As Integer
		  Dim o As Integer = __offset(38)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function
	  Public Function outputTypesAsByteBuffer() As ByteBuffer
		  Return __vector_as_bytebuffer(38, 1)
	  End Function
	  Public Function outputTypesInByteBuffer(ByVal _bb As ByteBuffer) As ByteBuffer
		  Return __vector_in_bytebuffer(_bb, 38, 1)
	  End Function
	  Public Function scalar() As FlatArray
		  Return scalar(New FlatArray())
	  End Function
	  Public Function scalar(ByVal obj As FlatArray) As FlatArray
		  Dim o As Integer = __offset(40)
		  Return If(o <> 0, obj.__assign(__indirect(o + bb_pos), bb), Nothing)
	  End Function
	  Public Function controlDeps(ByVal j As Integer) As String
		  Dim o As Integer = __offset(42)
		  Return If(o <> 0, __string(__vector(o) + j * 4), Nothing)
	  End Function
	  Public Function controlDepsLength() As Integer
		  Dim o As Integer = __offset(42)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function
	  Public Function varControlDeps(ByVal j As Integer) As String
		  Dim o As Integer = __offset(44)
		  Return If(o <> 0, __string(__vector(o) + j * 4), Nothing)
	  End Function
	  Public Function varControlDepsLength() As Integer
		  Dim o As Integer = __offset(44)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function
	  Public Function controlDepFor(ByVal j As Integer) As String
		  Dim o As Integer = __offset(46)
		  Return If(o <> 0, __string(__vector(o) + j * 4), Nothing)
	  End Function
	  Public Function controlDepForLength() As Integer
		  Dim o As Integer = __offset(46)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function
	  Public Function extraTypes(ByVal j As Integer) As SByte
		  Dim o As Integer = __offset(48)
		  Return If(o <> 0, bb.get(__vector(o) + j * 1), 0)
	  End Function
	  Public Function extraTypesLength() As Integer
		  Dim o As Integer = __offset(48)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function
	  Public Function extraTypesAsByteBuffer() As ByteBuffer
		  Return __vector_as_bytebuffer(48, 1)
	  End Function
	  Public Function extraTypesInByteBuffer(ByVal _bb As ByteBuffer) As ByteBuffer
		  Return __vector_in_bytebuffer(_bb, 48, 1)
	  End Function
	  Public Function extraStrings(ByVal j As Integer) As String
		  Dim o As Integer = __offset(50)
		  Return If(o <> 0, __string(__vector(o) + j * 4), Nothing)
	  End Function
	  Public Function extraStringsLength() As Integer
		  Dim o As Integer = __offset(50)
		  Return If(o <> 0, __vector_len(o), 0)
	  End Function

'JAVA TO VB CONVERTER NOTE: The parameter opType was renamed since it may cause conflicts with calls to static members of the user-defined type with this name:
	  Public Shared Function createFlatNode(ByVal builder As FlatBufferBuilder, ByVal id As Integer, ByVal nameOffset As Integer, ByVal opType_Conflict As SByte, ByVal opNum As Long, ByVal propertiesOffset As Integer, ByVal inputOffset As Integer, ByVal inputPairedOffset As Integer, ByVal outputOffset As Integer, ByVal extraParamsOffset As Integer, ByVal extraIntegerOffset As Integer, ByVal extraBoolsOffset As Integer, ByVal dimensionsOffset As Integer, ByVal device As Integer, ByVal scope_id As Integer, ByVal scope_nameOffset As Integer, ByVal outputNamesOffset As Integer, ByVal opNameOffset As Integer, ByVal outputTypesOffset As Integer, ByVal scalarOffset As Integer, ByVal controlDepsOffset As Integer, ByVal varControlDepsOffset As Integer, ByVal controlDepForOffset As Integer, ByVal extraTypesOffset As Integer, ByVal extraStringsOffset As Integer) As Integer
		builder.startObject(24)
		FlatNode.addOpNum(builder, opNum)
		FlatNode.addExtraStrings(builder, extraStringsOffset)
		FlatNode.addExtraTypes(builder, extraTypesOffset)
		FlatNode.addControlDepFor(builder, controlDepForOffset)
		FlatNode.addVarControlDeps(builder, varControlDepsOffset)
		FlatNode.addControlDeps(builder, controlDepsOffset)
		FlatNode.addScalar(builder, scalarOffset)
		FlatNode.addOutputTypes(builder, outputTypesOffset)
		FlatNode.addOpName(builder, opNameOffset)
		FlatNode.addOutputNames(builder, outputNamesOffset)
		FlatNode.addScopeName(builder, scope_nameOffset)
		FlatNode.addScopeId(builder, scope_id)
		FlatNode.addDevice(builder, device)
		FlatNode.addDimensions(builder, dimensionsOffset)
		FlatNode.addExtraBools(builder, extraBoolsOffset)
		FlatNode.addExtraInteger(builder, extraIntegerOffset)
		FlatNode.addExtraParams(builder, extraParamsOffset)
		FlatNode.addOutput(builder, outputOffset)
		FlatNode.addInputPaired(builder, inputPairedOffset)
		FlatNode.addInput(builder, inputOffset)
		FlatNode.addProperties(builder, propertiesOffset)
		FlatNode.addName(builder, nameOffset)
		FlatNode.addId(builder, id)
		FlatNode.addOpType(builder, opType_Conflict)
		Return FlatNode.endFlatNode(builder)
	  End Function

	  Public Shared Sub startFlatNode(ByVal builder As FlatBufferBuilder)
		  builder.startObject(24)
	  End Sub
	  Public Shared Sub addId(ByVal builder As FlatBufferBuilder, ByVal id As Integer)
		  builder.addInt(0, id, 0)
	  End Sub
	  Public Shared Sub addName(ByVal builder As FlatBufferBuilder, ByVal nameOffset As Integer)
		  builder.addOffset(1, nameOffset, 0)
	  End Sub
'JAVA TO VB CONVERTER NOTE: The parameter opType was renamed since it may cause conflicts with calls to static members of the user-defined type with this name:
	  Public Shared Sub addOpType(ByVal builder As FlatBufferBuilder, ByVal opType_Conflict As SByte)
		  builder.addByte(2, opType_Conflict, 0)
	  End Sub
	  Public Shared Sub addOpNum(ByVal builder As FlatBufferBuilder, ByVal opNum As Long)
		  builder.addLong(3, opNum, 0L)
	  End Sub
	  Public Shared Sub addProperties(ByVal builder As FlatBufferBuilder, ByVal propertiesOffset As Integer)
		  builder.addOffset(4, propertiesOffset, 0)
	  End Sub
	  Public Shared Function createPropertiesVector(ByVal builder As FlatBufferBuilder, ByVal data() As Integer) As Integer
		  builder.startVector(4, data.Length, 4)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addOffset(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startPropertiesVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(4, numElems, 4)
	  End Sub
	  Public Shared Sub addInput(ByVal builder As FlatBufferBuilder, ByVal inputOffset As Integer)
		  builder.addOffset(5, inputOffset, 0)
	  End Sub
	  Public Shared Function createInputVector(ByVal builder As FlatBufferBuilder, ByVal data() As Integer) As Integer
		  builder.startVector(4, data.Length, 4)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addInt(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startInputVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(4, numElems, 4)
	  End Sub
	  Public Shared Sub addInputPaired(ByVal builder As FlatBufferBuilder, ByVal inputPairedOffset As Integer)
		  builder.addOffset(6, inputPairedOffset, 0)
	  End Sub
	  Public Shared Function createInputPairedVector(ByVal builder As FlatBufferBuilder, ByVal data() As Integer) As Integer
		  builder.startVector(4, data.Length, 4)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addOffset(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startInputPairedVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(4, numElems, 4)
	  End Sub
	  Public Shared Sub addOutput(ByVal builder As FlatBufferBuilder, ByVal outputOffset As Integer)
		  builder.addOffset(7, outputOffset, 0)
	  End Sub
	  Public Shared Function createOutputVector(ByVal builder As FlatBufferBuilder, ByVal data() As Integer) As Integer
		  builder.startVector(4, data.Length, 4)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addInt(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startOutputVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(4, numElems, 4)
	  End Sub
	  Public Shared Sub addExtraParams(ByVal builder As FlatBufferBuilder, ByVal extraParamsOffset As Integer)
		  builder.addOffset(8, extraParamsOffset, 0)
	  End Sub
	  Public Shared Function createExtraParamsVector(ByVal builder As FlatBufferBuilder, ByVal data() As Double) As Integer
		  builder.startVector(8, data.Length, 8)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addDouble(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startExtraParamsVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(8, numElems, 8)
	  End Sub
	  Public Shared Sub addExtraInteger(ByVal builder As FlatBufferBuilder, ByVal extraIntegerOffset As Integer)
		  builder.addOffset(9, extraIntegerOffset, 0)
	  End Sub
	  Public Shared Function createExtraIntegerVector(ByVal builder As FlatBufferBuilder, ByVal data() As Long) As Integer
		  builder.startVector(8, data.Length, 8)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addLong(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startExtraIntegerVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(8, numElems, 8)
	  End Sub
	  Public Shared Sub addExtraBools(ByVal builder As FlatBufferBuilder, ByVal extraBoolsOffset As Integer)
		  builder.addOffset(10, extraBoolsOffset, 0)
	  End Sub
	  Public Shared Function createExtraBoolsVector(ByVal builder As FlatBufferBuilder, ByVal data() As Boolean) As Integer
		  builder.startVector(1, data.Length, 1)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addBoolean(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startExtraBoolsVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(1, numElems, 1)
	  End Sub
	  Public Shared Sub addDimensions(ByVal builder As FlatBufferBuilder, ByVal dimensionsOffset As Integer)
		  builder.addOffset(11, dimensionsOffset, 0)
	  End Sub
	  Public Shared Function createDimensionsVector(ByVal builder As FlatBufferBuilder, ByVal data() As Integer) As Integer
		  builder.startVector(4, data.Length, 4)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addInt(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startDimensionsVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(4, numElems, 4)
	  End Sub
	  Public Shared Sub addDevice(ByVal builder As FlatBufferBuilder, ByVal device As Integer)
		  builder.addInt(12, device, 0)
	  End Sub
	  Public Shared Sub addScopeId(ByVal builder As FlatBufferBuilder, ByVal scopeId As Integer)
		  builder.addInt(13, scopeId, 0)
	  End Sub
	  Public Shared Sub addScopeName(ByVal builder As FlatBufferBuilder, ByVal scopeNameOffset As Integer)
		  builder.addOffset(14, scopeNameOffset, 0)
	  End Sub
	  Public Shared Sub addOutputNames(ByVal builder As FlatBufferBuilder, ByVal outputNamesOffset As Integer)
		  builder.addOffset(15, outputNamesOffset, 0)
	  End Sub
	  Public Shared Function createOutputNamesVector(ByVal builder As FlatBufferBuilder, ByVal data() As Integer) As Integer
		  builder.startVector(4, data.Length, 4)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addOffset(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startOutputNamesVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(4, numElems, 4)
	  End Sub
	  Public Shared Sub addOpName(ByVal builder As FlatBufferBuilder, ByVal opNameOffset As Integer)
		  builder.addOffset(16, opNameOffset, 0)
	  End Sub
	  Public Shared Sub addOutputTypes(ByVal builder As FlatBufferBuilder, ByVal outputTypesOffset As Integer)
		  builder.addOffset(17, outputTypesOffset, 0)
	  End Sub
	  Public Shared Function createOutputTypesVector(ByVal builder As FlatBufferBuilder, ByVal data() As SByte) As Integer
		  builder.startVector(1, data.Length, 1)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addByte(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startOutputTypesVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(1, numElems, 1)
	  End Sub
	  Public Shared Sub addScalar(ByVal builder As FlatBufferBuilder, ByVal scalarOffset As Integer)
		  builder.addOffset(18, scalarOffset, 0)
	  End Sub
	  Public Shared Sub addControlDeps(ByVal builder As FlatBufferBuilder, ByVal controlDepsOffset As Integer)
		  builder.addOffset(19, controlDepsOffset, 0)
	  End Sub
	  Public Shared Function createControlDepsVector(ByVal builder As FlatBufferBuilder, ByVal data() As Integer) As Integer
		  builder.startVector(4, data.Length, 4)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addOffset(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startControlDepsVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(4, numElems, 4)
	  End Sub
	  Public Shared Sub addVarControlDeps(ByVal builder As FlatBufferBuilder, ByVal varControlDepsOffset As Integer)
		  builder.addOffset(20, varControlDepsOffset, 0)
	  End Sub
	  Public Shared Function createVarControlDepsVector(ByVal builder As FlatBufferBuilder, ByVal data() As Integer) As Integer
		  builder.startVector(4, data.Length, 4)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addOffset(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startVarControlDepsVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(4, numElems, 4)
	  End Sub
	  Public Shared Sub addControlDepFor(ByVal builder As FlatBufferBuilder, ByVal controlDepForOffset As Integer)
		  builder.addOffset(21, controlDepForOffset, 0)
	  End Sub
	  Public Shared Function createControlDepForVector(ByVal builder As FlatBufferBuilder, ByVal data() As Integer) As Integer
		  builder.startVector(4, data.Length, 4)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addOffset(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startControlDepForVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(4, numElems, 4)
	  End Sub
	  Public Shared Sub addExtraTypes(ByVal builder As FlatBufferBuilder, ByVal extraTypesOffset As Integer)
		  builder.addOffset(22, extraTypesOffset, 0)
	  End Sub
	  Public Shared Function createExtraTypesVector(ByVal builder As FlatBufferBuilder, ByVal data() As SByte) As Integer
		  builder.startVector(1, data.Length, 1)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addByte(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startExtraTypesVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(1, numElems, 1)
	  End Sub
	  Public Shared Sub addExtraStrings(ByVal builder As FlatBufferBuilder, ByVal extraStringsOffset As Integer)
		  builder.addOffset(23, extraStringsOffset, 0)
	  End Sub
	  Public Shared Function createExtraStringsVector(ByVal builder As FlatBufferBuilder, ByVal data() As Integer) As Integer
		  builder.startVector(4, data.Length, 4)
		  For i As Integer = data.Length - 1 To 0 Step -1
			  builder.addOffset(data(i))
		  Next i
		  Return builder.endVector()
	  End Function
	  Public Shared Sub startExtraStringsVector(ByVal builder As FlatBufferBuilder, ByVal numElems As Integer)
		  builder.startVector(4, numElems, 4)
	  End Sub
	  Public Shared Function endFlatNode(ByVal builder As FlatBufferBuilder) As Integer
		Dim o As Integer = builder.endObject()
		Return o
	  End Function
	  Public Shared Sub finishFlatNodeBuffer(ByVal builder As FlatBufferBuilder, ByVal offset As Integer)
		  builder.finish(offset)
	  End Sub
	  Public Shared Sub finishSizePrefixedFlatNodeBuffer(ByVal builder As FlatBufferBuilder, ByVal offset As Integer)
		  builder.finishSizePrefixed(offset)
	  End Sub
	End Class


End Namespace